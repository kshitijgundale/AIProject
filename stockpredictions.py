# -*- coding: utf-8 -*-
"""StockPredictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11MEN1wHPR-fCIyTh7-nCfEtJGwaS1U0T
"""

pip install yfinance

pip install ta

import pandas as pd
import matplotlib.pyplot as plt
import sklearn
import numpy as np 
import yfinance as yf
from datetime import datetime
import fastai.tabular 
from ta import add_all_ta_features

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler

from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import Lasso

stocks = ['AMZN', 'VEDL.NS', 'TCS.NS', 'ONGC.NS', 'TSLA', 'LT.NS']

for stock in stocks:
  stock_data = yf.Ticker(stock)
  df = stock_data.history(interval='1d', start='2015-4-29', end='2021-4-29')
  df.to_csv('data_' + stock +'.csv')

def create_model(stock, shift):
  df = pd.read_csv(f'data_{stock}.csv')
  
  date_change = '%Y-%m-%d'
    
  df['Date'] = pd.to_datetime(df['Date'], format = date_change)
  dates = df['Date']

  df = add_all_ta_features(df, "Open", "High", "Low", "Close", "Volume", fillna=True)

  fastai.tabular.add_datepart(df,'Date', drop = 'True')
  df['Date'] = pd.to_datetime(df.index.values, format = date_change)
  fastai.tabular.add_cyclic_datepart(df, 'Date', drop = 'True')

  df.insert(0,'Dates',dates)

  # Training models
  shift = -shift
  df['Close_lag'] = df['Close'].shift(shift)

  train_pct = .75
  train_pt = int(len(df)*train_pct)
  if train_pt < 400:
    train_pt = train_pt = int(len(df)*.5)
  train = df.iloc[:train_pt,:]
  test = df.iloc[train_pt:,:]
        
  x_train = train.iloc[:shift,1:-1]
  y_train = train['Close_lag'][:shift]
  x_test = test.iloc[:shift,1:-1]
  y_test = test['Close'][:shift]

  # Linear Regression

  lr = LinearRegression()
  lr.fit(x_train, y_train)
  lr_pred = lr.predict(x_test)
  lr_r2 = lr.score(x_test, y_test)
  print("Linear Regression R2 Score --> " + str(lr_r2))

  plt.figure(figsize=(15,5))
  #plt.plot(train['Dates'],train['Close'], label = 'True Training Data')
  plt.plot(test['Dates'],test['Close'], label = "True Test Data")
  plt.plot(test['Dates'][:shift], lr_pred, label = "prediction")
  plt.legend()
  plt.ylabel('Close')
  plt.title('Linear Regression - ' + stock + ' - ' + str(shift))
  plt.tight_layout()
  plt.savefig('Linear Regression - ' + stock + ' - ' + str(shift) + '.png')
  plt.figure(0)
  plt.show()

  # Multilayer Perceptron

  ss = StandardScaler()
  scaled_x_train = ss.fit_transform(x_train)
  scaled_x_test = ss.transform(x_test)

  mlp = MLPRegressor(random_state=1, max_iter=1000, hidden_layer_sizes = (100,), activation = 'identity',learning_rate = 'adaptive')
  mlp.fit(scaled_x_train, y_train)
  mlp_pred = mlp.predict(scaled_x_test)
  mlp_r2 = mlp.score(scaled_x_test, y_test)
  print("Multilayer Perceptron R2 Score --> " + str(mlp_r2))

  plt.figure(figsize=(15,5))
  # plt.plot(train['Dates'],train['Close'], label = 'True Training Data')
  plt.plot(test['Dates'],test['Close'], label = "True Test Data")
  plt.plot(test['Dates'][:shift], mlp_pred, label = "prediction")
  plt.legend()
  plt.ylabel('Close')
  plt.title('Multilayer Perceptron - ' + stock + ' - ' + str(shift))
  plt.tight_layout()
  plt.savefig('Multilayer Perceptron - ' + stock + ' - ' + str(shift) + '.png')
  plt.figure(1)
  plt.show()

  # Random Forest Regression

  rfr = RandomForestRegressor(n_estimators=15,max_depth=10)
  rfr.fit(x_train, y_train)
  rfr_pred = rfr.predict(x_test)
  rfr_r2 = rfr.score(x_test, y_test)
  print("Random Forest Regression R2 Score --> " + str(rfr_r2))

  plt.figure(figsize=(15,5))
  # plt.plot(train['Dates'],train['Close'], label = 'True Training Data')
  plt.plot(test['Dates'],test['Close'], label = "True Test Data")
  plt.plot(test['Dates'][:shift], rfr_pred, label = "prediction")
  plt.legend()
  plt.ylabel('Close')
  plt.title('Random Forest Regressor - ' + stock + ' - ' + str(shift))
  plt.tight_layout()
  plt.savefig('Random Forest Regressor - ' + stock + ' - ' + str(shift) + '.png')
  plt.figure(1)
  plt.show()

create_model('AMZN', 1)

create_model('AMZN', 5)

create_model('AMZN', 10)

create_model('VEDL.NS', 1)

create_model('VEDL.NS', 5)

create_model('VEDL.NS', 10)